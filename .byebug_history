exit
current_volunteer
current_volunteer?
current_volunteer.empty?
current_volunteer.true?
current_volunteer
exit
@cities
City.all
cities
exit
current_volunteer
current_volunteer.update_attributes(first_name: params[:volunteer][:first_name])
current_volunteer.update_attributes(name: params[:name])
params
current_volunteer
@admin
exit
params
exit
@cart.contents
@cart.total
@cart.contents
@cart
params
exit
session[:cart]
session
exit
params[:format]
params[:format].contents
params[:format].contents.map { |task_id, _quantity| Task.find(task_id) }
params[:format].tasks
params[:format]
params
exit
params
exit
params
exit
task.status
task.update_attributes(status: "retired")
task.update_attribute(status: "retired")
task.status
exit
@task.status
exit
city.tasks
task
exit
'exit
city.tasks.first
city.tasks.hours
city.tasks
exit
params
para,s
exit
city1
current_path
city2
exit
rspec
current_path
exit
city
exit
task_path(task)
view_context.link_to(task.name, task_path(task))
exit
rciy
volunteer
exit
volunteers_path
@volunteer
exit
@volunteer
exit
current_volunteer
exit
current_volunteer
session[:volunteer_id]
session
current_volunteer
current_user
exit
current_user
exit
flash
params
exit
current_volunteer
params
@current_volunteer
params
exit
@volunteer
@current_volunteer
exit
@volunteer
exit
@volunteer
exit
rake routes
rake routs
params
task
exit
params
exit
contents
exit
City.find_by(slug: params[:name].parameterize)
City.find_by(slug: params[:name])
City.find_by(name: params[:slug])
City.find_by(slug: params[:slug])
City.first
params
exit
@city.tasks
@city.name
@city
exit
City.all
City.includes(:tasks).find_by(name: params[:name])
params
@city
exit
contents.has_key?(task_id.to_s)
contents
contents.has_key?(task_id)
task_id
contents.include?(task_id)
contents.keys.include?(task_id)
contents.keys.includes?(task_id)
contents
contents.keys.include?(task_id)
contents.include?(task_id)
contents[task_id.to_s] = 1
contents.include?(task_id)
exit
contents
task_id
session[:cart]
exit
city.tasks.map { |task| task.hours }
first = _
city.tasks.first.hours
city.tasks.count
city.tasks.reduce(0) { |sum, element| sum += element.hours }
city.tasks
cart
city
exit
city2.tasks
city2
exit
City.all
city
exit
rspec
create(:task)
Task.all
create(:city_with_tasks)
    create(:city_with_tasks)
exit
tasks.select.hours
tasks.select
tasks
tasls
tasks.reduce(0) { |sum, task| sum += task.hours }
tasks.reduce { |sum, task| sum += task.hours }
tasks.reduce { |sum, element| sum += task.hours }
tasks
tasks.keys
tasks.select(:hours)
tasks.select
tasks.reduce {|i, task| i += task.hours}
tasks.hours
tasks.first.hours
tasks.first
tasks
tasks.pluck(:hours)
tasks.pluck(:hours).sum
tasks.sum(:hour)
tasks.sum(:hours)
tasks = contents.map {|key, value| Task.find(key)}
contents.map {|key, value| Task.find(key)}
contents
exit
contents.sum(:hours)
contents
session[:cart]
<<<<<<< HEAD
=======
Task.sum(:hours)
Task.pluck("hours").sum
Task.all.count
Task.all
exit
city.tasks.count
city
exit
city.last.tasks.count
city.count
city.first.tasks.count
city.first.tasks
city
coty
exit
tasks = @cart.contents.map {|task_id, quantity| Task.find(task_id) }
@cart.contents
@cart.tasks
@cart
session[:cart]
params
exit
session[:cart]
params
exit
session[:cart]
exit
params
exit
rspec
params
exit
params
exit
params
@city
exit
params
params[:name]
@city
exit
task.first.city
task.volunteer
task
task.city
task
City.first.tasks
exit
City.first.tasks
City.first.task
City.tasks
City.all
tasks.city
tasks
exit
@city.tasks
@city
params
exit
@city
params
